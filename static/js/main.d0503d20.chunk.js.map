{"version":3,"sources":["components/CicloDeVida.jsx","App.js","serviceWorker.js","index.js"],"names":["CicloDeVida","cambiarStateNombre","setState","nombre","nextProps","nextState","console","log","prevProps","prevState","onClick","this","state","quotes","length","quote","map","element","index","key","author","axios","get","respuesta","data","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAGqBA,E,4MA0BjBC,mBAAqB,WACjB,EAAKC,SAAS,CAAEC,OAAQ,W,oEA1BNC,EAAWC,GAM7B,OALAC,QAAQC,IAAI,0BACZD,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZC,QAAQC,IAAI,uCACZD,QAAQC,IAAI,2BACL,I,0CAGSH,EAAWC,GAC3BC,QAAQC,IAAI,0BACZD,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZC,QAAQC,IAAI,qCACZD,QAAQC,IAAI,4B,yCAGGC,EAAWC,GAC1BH,QAAQC,IAAI,0BACZD,QAAQC,IAAIC,GACZF,QAAQC,IAAIE,GACZH,QAAQC,IAAI,oCACZD,QAAQC,IAAI,4B,+BASZ,OADAD,QAAQC,IAAI,wBAER,iCACI,4BAAQG,QAASC,KAAKV,oBAAtB,kBACA,yDACA,2BAAG,uCAAH,IAAoBU,KAAKC,MAAMT,QAE9BQ,KAAKC,MAAMC,OAAOC,OAAS,EAAIH,KAAKC,MAAMC,OAAO,GAAGE,MAAQ,GAE7D,4BACKJ,KAAKC,MAAMC,OAAOG,KAAI,SAACC,EAAQC,GAC5B,OAAO,wBAAIC,IAAKD,GACZ,qCAAWD,EAAQG,QAClBH,EAAQF,c,2CAU7BT,QAAQC,IAAI,iCACZI,KAAKR,OAAS,QACdQ,KAAKT,SAAS,CACVW,OAAQ,O,iKAKZP,QAAQC,IAAI,mC,SAcUc,IAAMC,IAAI,0I,OAA5BC,E,OACLZ,KAAKT,SAAS,CAAEW,OAAQU,EAAUC,KAAKX,S,2GA7ELY,aCQ1BC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.d0503d20.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class CicloDeVida extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log(\"======================\")\n        console.log(nextProps)\n        console.log(nextState)\n        console.log(\"Se ejecuto el shouldComponentUpdate\")\n        console.log(\"======================\")\n        return true\n    }\n\n    componentWillUpdate(nextProps, nextState){\n        console.log(\"======================\")\n        console.log(nextProps)\n        console.log(nextState)\n        console.log(\"Se ejecuto el componentWillUpdate\")\n        console.log(\"======================\")\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        console.log(\"======================\")\n        console.log(prevProps)\n        console.log(prevState)\n        console.log(\"Se ejecuto el componentDidUpdate\")\n        console.log(\"======================\")\n    }\n\n    cambiarStateNombre = () => {\n        this.setState({ nombre: \"Pedro\" })\n    }\n\n    render() {\n        console.log(\"Se ejecuto el render\")\n        return (\n            <article>\n                <button onClick={this.cambiarStateNombre}>Cambiar Estado</button>\n                <p>Hola desde class component</p>\n                <p><b>Nombre: </b> {this.state.nombre}</p>\n\n                {this.state.quotes.length > 0 ? this.state.quotes[0].quote : \"\"}\n\n                <ul>\n                    {this.state.quotes.map((element,index) => {\n                        return <li key={index}>\n                            <b>Autor: {element.author}</b>\n                            {element.quote}\n                        </li>\n                    })\n                    }\n                </ul>\n            </article>\n        );\n    }\n\n    componentWillMount() {\n        console.log(\"Se ejecuto componentWillMount\")\n        this.nombre = \"Oscar\"\n        this.setState({\n            quotes: []\n        });\n    }\n\n    async componentDidMount() {\n        console.log(\"Se ejecuto el componentDidMount\");\n        /*$.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\", {}, (data,status,jqXHR) => {\n          console.log(status,jqXHR)\n          this.setState({quotes:data.quotes})\n        }, \"json\" ) */\n        /*\n         let  respuesta =  await $.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n         let data = JSON.parse(respuesta)\n        this.setState({quotes : data.quotes}) */\n        /* let  respuesta =  await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n          let data = await respuesta.json();\n          this.setState({quotes : data.quotes}) */\n\n\n        let respuesta = await axios.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\n       this.setState({ quotes: respuesta.data.quotes })\n\n    }\n\n}\n","import React from 'react';\nimport CicloDeVida from './components/CicloDeVida'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <CicloDeVida/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}